<HTML>

<HEAD>
<META NAME="GENERATOR" Content="Microsoft Visual Studio 8.0">
<TITLE>DiZ Documentation: DiZ Graphics- DIZ_WINDOW</TITLE>
<link rel="Stylesheet" type="text/css" href="../../Resources/layout.css" />
</HEAD>

<BODY>
<h1>DiZ Documentation: DIZ_WINDOW</h1>
<a href="../../index.htm">Index</a> -> <a href="../diz_graphics_index.htm">DiZ Graphics</a><br /><br />

<ul>
    <li><a href="#overview">Overview</a></li>
    <li><a href="#declarations">Declaration</a></li>
    <li><a href="#example">Example</a></li>
</ul>
<hr />

<h2><a id="overview">Overview</a></h2>
<code>DIZ_WINDOW</code> is the main class in DiZ for facilitating the creation of an OpenGL Window. It contains and covers all necessary
features for doing this.

<h2><a id="declarations">Declaration</a></h2>
<pre class="code">
//This class handles all window functions and properties
class DIZ_WINDOW {
public:
	//Declare our Constructor and Destructor
	DIZ_WINDOW();
	~DIZ_WINDOW();

	//Declare all our window functions
	//This function sizes our OpenGL viewport to the desired size
	void resizeGL();
	//This function initialises all our OpenGL settings
	bool initGL();
	//This function closes our window down
	void killWindow();
	//This function creates our window
	bool createWindow();

	//Declare a WNDINFO structure to hold all the properties of our window
	DIZ_WNDINFO info;
	//Declare our handle for our Rendering Context
	HGLRC hRC;
	//Declare our handle for our Device Context
	HDC hDC;
	//Declare our window handle
	HWND hWnd;
	//Declare a handle for our application instance
	HINSTANCE hInstance;
};
</pre>

<h4>void resizeGL()</h4>
This function sizes the OpenGL window to the correct size. This is initially done automatically but is necessary if ever altering
the size of a window during the execution of a program.

<h4>bool initGL()</h4>
This function sets up various OpenGL settings according to the settings you have specified for the window. This is used internally
by the class and need not be called by the user in any event.

<h4>void killWindow()</h4>
This function destroys the Window and its OpenGL context. This should be called upon program completion.

<h4>bool createWindow()</h4>
This function creates the OpenGL Window using the settings you have specified. Returns <code>true</code> if successful and <code>false</code>
if any problems occurred. This should be checked when starting up a program.

<h4>DIZ_WNDINFO info</h4>
This structure contains all the settings for the window. See <code><a href="diz_graphics_wndinfo.htm">DIZ_WNDINFO</a></code>.

<h4>HGLRC hRC</h4>
This is the handle to the OpenGL rendering context. This is primarily used internally by the class.

<h4>HDC hDC</h4>
This is the handle to the Device Context created. This can be used by the user in calls such as <code>SwapBuffers(hDC)</code> and any other
situation in which the handle is necessary.

<h4>HWND hWnd</h4>
This is the handle to the Window created. This is primarily used internally by the class.

<h4>HINSTANCE hInstance</h4>
This is the handle to the program's instance. This is primarily used internally by the class.

<h2><a id="example">Example</a></h2>
The following example demonstrates common use of the <code>DIZ_WINDOW</code> class.

<pre class="code">
    //Try to create our window and make sure nothing goes wrong
    if (!window.createWindow()) {
        MessageBox(NULL, "Couldn't create window.", "Startup Error", MB_OK | MB_ICONINFORMATION);
        return 0;
    }

    //Declare a MSG structure to hold info for all incoming window messages
    MSG msg;

    //Start our main loop
    while (!done) {
        //Check if there are any window messages coming in
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
            //If it's specifically a QUIT message, we exit our loop
            if (msg.message == WM_QUIT) {
                done = true;
            }else {
                //Otherwise, we Translate it and Dispatch it to our WndProc
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
        }
        //Go through our main loop
        //[...]
        //Then draw our scene and swap the buffers
        drawScene();
        SwapBuffers(window.hDC);
    }
	
    //Once we're exiting, we kill our window
    window.killWindow();
</pre>

The Message Pump is an important part of any window and cannot be covered by the <code>DIZ_WINDOW</code> class. If unfamiliar with this,
you may look at the first full DiZ example.
</BODY>

</HTML>
